#!/bin/bash
# Run test for 300 seconds
HOST=`hostname`
EXPIRES=100
END=16
IFACE=babel0
PROTO=8 # reuse gated for this sort of testing
PLEN=64 # FIXME: a good idea to start testing variable length prefixes too
# Randomize the starting point
R1=${RANDOM}
R2=${RANDOM}
R=`expr ${R1} \* ${R2}`
R=1

#IPv6 Prefix generator intended to blow up routes everywhere
#Crudely but consistently generate a random PREFIX
#use the fc range to keep it clear

a=`echo $HOST | md5sum`

# You'd think the ietf standards would let you just punch in a hex string
# without colons. But noooo....

PREFIX=fc${a:0:2}:${a:3:4}:${a:7:4}:
#START=`printf %x:%x:%x ${R,0:4} ${R,4:4} ${R,8:4}`

echo $HOST has $PREFIX starting at $START

export PREFIX PROTO IFACE END EXPIRES

setup() {
ip link add $IFACE type dummy
ip link set $IFACE up
# Add a covering route to add to the fun and let it stick around longer
EXP2=`expr $EXP2 + 60`
EXP3=`expr $EXPIRES + 120`
ip -6 route add ${PREFIX}:/48 dev $IFACE expires $EXP2 proto $PROTO
ip -6 route add ${PREFIX}:/56 dev $IFACE expires $EXP3 proto $PROTO
# Let me see which box is acting up... 
ip -6 addr add ${PREFIX}:1/48 dev $IFACE proto $PROTO noprefixroute
}

teardown() {
ip link del $IFACE
}

add() {
local I=$R
#local E=`expr $R + $END`
for i in `seq 1 $END`
do
local E2=`printf %x ${i}`
#E2=`printf ${W1,0:(-4)}:${W1,0:(-4)}` # ${W1,0:4}`
ip -6 route add ${PREFIX}${E2}::/$PLEN dev $IFACE proto $PROTO expires $EXPIRES
done
}

del() {

ip -6 route flush dev $IFACE proto $PROTO

}

killme() {
sleep $EXPIRES
del
teardown
}

main() {
setup
add
killme &
}

main
