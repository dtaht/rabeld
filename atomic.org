* Hmm. Maybe we have a type casting problem

some places where the proto is unsigned char, others where it is an int,
and many, many casts. This would explain why I didn't see it when I
looked in the proto built up. Really need a netlink verifier.

* gcc inline intrinsics

http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/

* Do a graceful shutdown

https://github.com/fordsfords/blink/tree/gh-pages


* NEONCopy of 8 words at a time

      VLDM r1!, {d0-d7}
      VSTM r0!, {d0-d7}
      SUBS r2, r2, #0x40
      BGE NEONCopy

* I AM seeing major filesystem corruption in chip-1, chip-5

And sigh, temp is not ramfs either. Nearly nobody coming from debian seems to
understand the need to never write flash. The openwrt folk had this hard lesson
burned right into them.

I will have to reflash

systemctl enable tmp.mount - like that bit of magic was easier to understand
than /etc/fstab

# UNCONFIGURED FSTAB FOR BASE SYSTEM
tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0

http://www.chip-community.org/index.php/Flash#Extend_life

systemctl set-default multi-user.target - disable the gui

** chip-1 was toast while I was doing these

* Finally wrote v6_equal and got rid of memcmp
with my luck memcmp(x,y,16) was more efficient, but I can roll a benchmark now.
Kind of need to get better about forcing alignment elsewhere. The arm assembly
is emitting unaligned loads...

** MIPS assembly

** ARM 64 bit assembly
Have to go boot that box
** ARM 32 bit assembly (gcc 4.9)
To me, I'd have cleared 8 regs, loaded 4 at a time, xored each then orred them.
A dual issue arch would have only stalled on the loads and last or. And, sigh -
this still generates a call to a subroutine in the -Os mode, inlined with -O3

        bne     .L21    @,
        ldr     r3, [r4, #4]    @ tmp250, MEM[base: _8, offset: 4B]
        ldr     r6, [r0, #4]    @ MEM[(const unsigned int *)prefix_12(D) + 4B], MEM[(const unsigned int *)prefix_12(D) + 4B]
        eors    r6, r6, r3      @, D.7287, MEM[(const unsigned int *)prefix_12(D) + 4B], tmp250
        ldr     r3, [r4]        @ tmp251, MEM[base: _8, offset: 0B]
        mov     ip, r3  @ tmp251, tmp251
        ldr     r3, [r0]        @ tmp252, MEM[(const unsigned int *)prefix_12(D)]
        eor     ip, ip, r3      @ D.7287, tmp251, tmp252
        ldr     r3, [r4, #8]    @ tmp255, MEM[base: _8, offset: 8B]
        orr     r8, r6, ip      @ D.7287, D.7287, D.7287
        ldr     r6, [r0, #12]   @ MEM[(const unsigned int *)prefix_12(D) + 12B], MEM[(const unsigned int *)prefix_12(D) + 12B]
        mov     ip, r3  @ tmp255, tmp255
        ldr     r3, [r0, #8]    @ tmp256, MEM[(const unsigned int *)prefix_12(D) + 8B]
        eor     ip, ip, r3      @ D.7287, tmp255, tmp256
        ldr     r3, [r4, #12]   @ tmp259, MEM[base: _8, offset: 12B]
        orr     ip, r8, ip      @ D.7287, D.7287, D.7287
        eors    r6, r6, r3      @, D.7287, MEM[(const unsigned int *)prefix_12(D) + 12B], tmp259
        orrs    r3, ip, r6      @ tmp248, D.7287, D.7287
        beq     .L21    @,

** NEON assembly
I count at least 12 clocks of processing here. No matter how bad the stall is,
emitting a neon instruction would help...

if there was some way some how to do the mov ip, neonreg, mov ip+x, neonreg,
xor, (store it back) - bne, I free up 8 main registers for "other stuff". It
gets even better when comparing 2 prefixes (as in find_* - 4 loads, 2 xors, an
or, then store it back, at the cost of 4 neon registers - which fills the
pipeline, and keeps the integer unit doing other stuff....

** the x86_64 assembly makes me happy though I could be delusional
It looks like it doesn't manage to keep the core prefix in a reg while walking 
the pointer tree in find_* and not spill. But still - WAY better than memcmp
I think.

        movq    16(%r8), %r11   # MEM[base: _9, offset: 16B], MEM[base: _9, offset: 16B]
        movq    24(%r8), %r10   # MEM[base: _9, offset: 24B], MEM[base: _9, offset: 24B]
        xorq    (%rdx), %r11    # MEM[(const long unsigned int *)src_prefix_19(D)], D.5107
        xorq    8(%rdx), %r10   # MEM[(const long unsigned int *)src_prefix_19(D) + 8B], D.5107
        orq     %r10, %r11      # D.5107, tmp153
        jne     .L21    #,



* Killing network manager was a pita

But it totally saved on cpu and crash.

I basically did it via:

wpa_supplicant -dd -Dnl80211 -iwlan0 -c /etc/wpa_supplicant/chip.conf  &
root@chip-6:/etc/wpa_supplicant# ifconfig wlan0 up
root@chip-6:/etc/wpa_supplicant# dhclient wlan0

but in doing that I couldn't get back into the system via anything but serial.


* On the chips, I think... in the end what's killing them
is networkmanager going crazy listening to netlink. 
they were red-hot when I rebooted them

because odhcpd is smarter we don't pound it as hard. Have to look into the
bpf stuff in that. That looks HANDY.

* Killed the thinko on source specific


* And like an hour later (after trying to announce stuff with a longer expires)

I still have 2000 unreachable routes in the archer.

* Going back into a chip via serial termainal

The wifi driver is completely wedged. Ah, well, I wanted to blow up
multicast....

and if you reboot the chip, the local usb interface on this side recognises
that the driver went away, does recreate the interface, but does not up it again
so it is usable.

That's ok, when the chip comes up in this state, it doesn't get a usable
anything

The chips, btw, will not "just start" if you plug the battery in. Nor do they
seem to respond to what I thought was the power button. Unplugging the battery
works but it is very fragile. I tried one script, and it constantly polled the
cpu for the button, instead of blocking.

You can learn battery status from battery.sh

https://bbs.nextthing.co/t/usb-power-and-ups-battery-power-button/2812/4

* In going back to doing this using the default babel daemon

I managed to completely crash all the chips on the network. 

Running out of cpu doesn't help either.

* Insight #3 

and then everybody announces route retractions
while everybody is trying to get routes
Randomizing and rate limiting the retractions would help
Finding some way to aggregate a retraction would help

... And all this started merely because I was trying to A) blow up multicast and
B) look into why netlink and sending packets sometimes failed

I downgraded my test to just inject 1000 routes...

* Insight #2

Everybody else starts getting those routes - but does not respect the
initial announcement, and re-announces with an interval of its default.

And then the network collapses.

* Insight

OK, I'm announcing 10,000 routes. I know that I can send 80 per packet
1k * 125 at 1Mbit (13ms) 1.6sec just to announce the routes.

And the insight was this is times the number of speakers on the link
So if I have 10 speakers rebroadcasting this amount - thats 16 seconds
gone out of the 16 without any further traffic.

The rate limiter is in the wrong place, I think, I still need to 
get hellos out there, no matter what.

When I have a ton of routes, I need to start changing the announced
interval, and also start bumping up the hello interval. And make sure that gets
out there....

Another idea is to announce that I hear X number of routes on this link
in the multicast IHU. They may be disjoint, but the router_id that hears the
most routes from a given router_id is a winner. 

And I'd need to be counting all the routes in my route table to get an estimate
and in order to flood the routes

And always reannounce the most bestest biggest routes - like src specific and
default gateways - more often.

I always wondered where the hard 10,000 route limit came from, it wasn't
cpu - but the protocol implementation itself.

* Chips don't have telnet and their nc is broken

root@chip-1:~/babeld# nc ::1 33123
::1: forward host lookup failed: Unknown host
root@chip-1:~/babeld# 


* babeld.c routerid can change
during early boot we don't have a stable set of interfaces
bridging might be kicking in, wifi still be setting up

    if(!have_id && !random_id) {
        /* We use all available interfaces here, since this increases the
           chances of getting a stable router-id in case the set of Babel
           interfaces changes. */

* One of my other kvetches

always picks up the wifi links sooner

root@chip-1:~/babeld# ip route | grep usb
default via 172.26.97.1 dev usb0  proto babel onlink 
169.254.0.0/16 dev usb0  scope link  metric 1000 
172.26.16.0/24 via 172.26.97.1 dev usb0  proto babel onlink 
172.26.20.0/22 via 172.26.97.1 dev usb0  proto babel onlink 
172.26.96.100 via 172.26.97.1 dev usb0  proto babel onlink 


* netlink COULD return 0

and why?

-        if(len < 0) {
+    if(len < 0) {
             perror("netlink_read: recvmsg()");
             return -1;


* TODO poke into why we get the send error twice

Interface eno1 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 0
Interface eno1 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 0
send: Cannot assign requested address
send: Cannot assign requested address

So when I take the wifi interface down I don't see the down event

send: Cannot assign requested address
send: Cannot assign requested address
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process

I bring it up

Type: 2
Interface wlp2s0 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 2
Interface wlp2s0 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 2
Interface wlp2s0 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 2
Interface wlp2s0 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 2
Interface wlp2s0 has no link-local address.
setsockopt(IPV6_LEAVE_GROUP): Cannot assign requested address
Type: 2
send: Cannot assign requested address
send: Cannot assign requested address

Not sure why we call leave group.

Anyway I bring that up and then take eno1 down

send: Cannot assign requested address
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
// Why would I call ADD during an event like this?
kernel_route(ADD): Network is down
kernel_route(FLUSH): No such process
kernel_route(ADD): Network is down
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process

* So I can backfil the "good" things into the basic babel branch until it breaks

** DONE More robust error checking -- which may be too robust
** Compile guards
** Whole program optimization
** 

* So I went back to the default babel for source specific and it worked

somewhere in all these changes, I blew something up. No surprising.

Perhaps you can get a temporary file exists message? or... 

ALSO:

in babeld I got a new message when I took the interface up and down.

ENETDOWN

kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(ADD): Network is down
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process
kernel_route(FLUSH): No such process


* Let's test this noprefixroute idea

* What to do with ra and source specific

Right now my rabel is in such a state that you cannot install a src specific
address on top of a local address, or so it seems.

failed kernel_route: add 172.26.16.0/24 from ::/0 table 254 metric 0 dev 2 nexthop 172.26.16.5
kernel_route(ADD): File exists
failed kernel_route: add ::/0 from 2601:646:4101:2de0::/60 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
kernel_route(ADD): File exists
failed kernel_route: add ::/0 from 2601:646:4101:a740::/60 table 254 metric 0 dev 2 nexthop fe80::32b5:c2ff:fe75:7faa
kernel_route(ADD): File exists

root@dancer:~/git/rabeld# ip -6 route | grep default
default via fe80::32b5:c2ff:fe75:7faa dev eno1 proto ra metric 1024  expires 65524sec hoplimit 64 pref high
default via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto static metric 2048  pref medium

root@dancer:~/git/rabeld# ip -6 route | grep from
2406:da00:ff00::/48 from 2600:3c01:e001::/48 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2620:0:ef0::/48 from 2600:3c01:e001::/48 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium

** But... wait - Yea! this looks like a genuine bug in babel because it works from iproute!
Could this be the order of the args to netlink?

ip -6 route add default from 2601:646:4101:a740::/60 table 254 metric 0 dev eno1 via fe80::32b5:c2ff:fe75:7faa

root@dancer:~/git/rabeld# ip -6 route | grep from
default from 2601:646:4101:a740::/60 via fe80::32b5:c2ff:fe75:7faa dev eno1 metric 1024  pref medium
2406:da00:ff00::/48 from 2600:3c01:e001::/48 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2620:0:ef0::/48 from 2600:3c01:e001::/48 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium

And the ipv4 message seems odd, as if it's going to be from it should be
reversed, but that's perhaps a debugging message.

failed kernel_route: add 172.26.16.0/24 from ::/0 table 254 metric 0 dev 2 nexthop 172.26.16.5
kernel_route(ADD): File exists


* What to do with noprefixroute?

And for that matter these - I think ever announcing addresses with short
lifetimes is bad - and at the same time we could be smarter about doing the
retraction during the preferred_lft period - e.g. retract the route 2 minutes
after the preferred_lft expires. Nah.

But what I'd like to do is not announce so many frickin addresses with routes
attached. If I have a /128 on the same network as my /64, just announce the
/64 and be done with it.

And. Sigh - ipv4 has no noprefixroute concept.

2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 state UP qlen 1000
    inet6 fdaf:dc63:6de9:8:74d8:e400:84f9:38ce/64 scope global temporary dynamic 
       valid_lft 592232sec preferred_lft 73595sec
    inet6 fdaf:dc63:6de9:8:eea8:6bff:fefe:9a2/64 scope global mngtmpaddr dynamic 
       valid_lft forever preferred_lft forever
    inet6 2601:646:4101:a740:74d8:e400:84f9:38ce/64 scope global temporary dynamic 
       valid_lft 299312sec preferred_lft 73595sec
    inet6 2601:646:4101:a740:eea8:6bff:fefe:9a2/64 scope global mngtmpaddr dynamic 
       valid_lft 299312sec preferred_lft 299312sec
    inet6 fe80::eea8:6bff:fefe:9a2/64 scope link 
       valid_lft forever preferred_lft forever
3: wlp2s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 state UP qlen 1000
    inet6 fd32:7d58:8d63::199/128 scope global 
       valid_lft forever preferred_lft forever
    inet6 fd32:7d58:8d63:0:a120:a749:ac4:cddf/64 scope global noprefixroute 
       valid_lft forever preferred_lft forever
    inet6 2601:646:4101:2de0:d041:214e:f40a:fe12/64 scope global noprefixroute dynamic 
       valid_lft 307239sec preferred_lft 307239sec
    inet6 fe80::19e7:b4bd:1a5e:561a/64 scope link 
       valid_lft forever preferred_lft forever


* Profile

Box was relatively idle during these runs

ach sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 57.46      5.40     5.40  1003792     0.01     0.01  find_resend
 18.75      7.16     1.76  5624187     0.00     0.00  find_route_slot
  3.30      7.47     0.31  1433517     0.00     0.01  update_route
  1.60      7.62     0.15     4569     0.03     0.20  update_neighbour_metric
  1.12      7.72     0.11                             compare_buffered_updates
  1.07      7.82     0.10                             parse_packet
  0.96      7.91     0.09  1344015     0.00     0.00  really_send_update
  0.85      7.99     0.08   176097     0.00     0.01  flushupdates
  0.80      8.07     0.08  6450137     0.00     0.00  prefix_cmp
  0.75      8.14     0.07     1298     0.05     0.05  route_stream


* Let's try injecting only 4000 routes

I installed 2000 routes - they were reachable briefly, then
went unreachable briefly, then went reachable.

One of the other boxes on the link went unreachable and stayed
that way....

really want atomic updates!!!!

Now I have one route left over

@dancer:~/git/rabeld$ ip -6 route | grep fd44
fd44:0:0:7d0::/64 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium

Trust. But verify.

* Sometime above about 4000 routes

everything goes unreachable.

I am increasingly certain babel has always been borken these ways.

send(unicast): Cannot assign requested address

Unreachable default route!
Unreachable default route!
failed kernel_route: add ::/0 from 2601:646:4101:2de0::/60 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
failed kernel_route add during replace: modify ::/0 from 2601:646:4101:2de0::/60 table 254 metric 65535 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
Add failed during replace: File exists
Unreachable default route!
Unreachable default route!
Unreachable default route!
Unreachable default route!
Unreachable default route!
Unreachable default route!
Unreachable default route!
Unreachable default route!
failed kernel_route: add ::/0 from 2601:646:4101:a740::/60 table 254 metric 0 dev 2 nexthop fe80::32b5:c2ff:fe75:7faa
failed kernel_route add during replace: modify ::/0 from 2601:646:4101:a740::/60 table 254 metric 65535 dev 3 nexthop fe80::3aa2:8cff:fe5d:f9e5
Add failed during replace: File exists

ailed kernel_route add during replace: modify ::/0 from 2601:646:4101:a740::/60 table 254 metric 65535 dev 3 nexthop fe80::3aa2:8cff:fe5d:f9e5
Add failed during replace: File exists
failed kernel_route: flush ::/0 from 2601:646:4101:2de0::/60 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
Unreachable default route!
Unreachable default route!



send: Resource temporarily unavailable
send: Resource temporarily unavailable

d@dancer:~/git/rabeld$ ip -6 route | grep unreach | wc -l
8306
d@dancer:~/git/rabeld$ ip -6 route | grep -v unreach | wc -l
1715

Then everything goes unreachable

d@dancer:~/git/rabeld$ ip -6 route | grep -v unreach | wc -l
18
d@dancer:~/git/rabeld$ ip -6 route | grep unreach | wc -l
10003

send: Resource temporarily unavailable
send: Resource temporarily unavailable

FIXME: Get the fucking metric here
failed kernel_route: flush ::/0 from 2601:646:4101:2de0::/60 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process ???
failed kernel_route: add ::/0 from 2601:646:4101:2de0::/60 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(ADD): File exists


* Added more debugging code

I am not getting any "default from" routes at the moment
It wouldn't surprise me if everything else on the net is hosed
It also wouldn't surprise me my kernel is the cause of all this.

** Disabling an interface via network manager does this:

*** TODO I am curious what noprefixroute does nowadays

*** I wonder how many other routes were on this in the window

failed kernel_route: flush 172.26.96.61/32 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.127
kernel_route(FLUSH): No such process
failed kernel_route: flush 172.26.96.65/32 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.113
kernel_route(FLUSH): No such process
failed kernel_route: flush 172.26.201.127/32 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.127
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::61/128 from ::/0 table 254 metric 0 dev 3 nexthop fe80::3aa2:8cff:fe5d:f9e5
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::65/128 from ::/0 table 254 metric 0 dev 3 nexthop fe80::3aa2:8cff:fe5d:effb
kernel_route(FLUSH): No such process

** And bringing it back up does this:

kernel_route(FLUSH): No such process
Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send(unicast): Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send(unicast): Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send(unicast): Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send(unicast): Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address
send(unicast): Cannot assign requested address

* printfs checking to see if stuff got spat on didn't help

I can do more robust checking than I did. But I need to go
look at the netlink bug workarounds on the web.

* Ironically FQ will help

There is a single queue for all netlink events. This means
that if work is backlogged on a given queue, and the interface
goes away as it does here - we used to just hammer on the socket
for 500ms. Now I'm only doing it for 50 (100?), but it isn't
going to clear that fast.

A "cure" would be to use select on one multicast group per idea.

This might give us better ipv4 performance when ipv6 is acting up,
it certainly will let us see interface changes faster, so instead
of madly retrying, just return on a send failure and check to see
if something happened elsewhere in the system

For all I know this has some bearing on getting EAGAIN in the wrong place
as documented elsewhere on the net for openvswitch.

Fixing the select loop will take some work.


Type: 2
Interface wlp2s0 has no link-local address.
Type: 2
setsockopt(IPV6_JOIN_GROUP): Address already in use
Type: 2
sendmsg: kernel returned unknown error
: Cannot assign requested address
sendmsg: kernel returned unknown error
: Cannot assign requested address

* OK we can still do ourselves in

failed kernel_route: flush fd44:0:0:ae8::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
failed kernel_route: flush fd44:0:0:ae9::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
failed kernel_route: flush fd44:0:0:aea::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
failed kernel_route: flush fd44:0:0:aeb::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d

And now, great - it shows up as static

root@dancer:~/git/rabeld# vi ds
root@dancer:~/git/rabeld# ip -6 route | grep fd44:0:0:ae8::/64

fd44:0:0:ae8::/64 via fe80::3aa2:8cff:fe5d:effb dev wlp2s0 proto static metric 1024  pref medium
unreachable fd44:0:0:ae8::/64 dev lo proto babel metric 4294967295  error -113 pref medium

* Network Manager fear and revulsion

Doesn't have a way to put in protos.

Want it to use "proto dhcp" Doesn't. Totally unclear on all the
machinery

** DONE Sent an email to the list

This, on the other hand, will at least give everything an overlarge
metric.

/etc/NetworkManager.conf

[connections]
ipv6.route-metric=2048
ipv4.route-metric=2048

root@dancer:/etc/NetworkManager# ip -6 route show | grep 'proto ra'
2601:646:4101:2de0::/64 dev wlp2s0 proto ra metric 2048  pref medium
2601:646:4101:2de0::/60 via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto ra metric 2048  pref medium
fd32:7d58:8d63::/64 dev wlp2s0 proto ra metric 2048  pref medium
fd32:7d58:8d63::/48 via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto ra metric 2048  pref medium
default via fe80::32b5:c2ff:fe75:7faa dev eno1 proto ra metric 1024  expires 65113sec hoplimit 64 pref high

root@dancer:/etc/NetworkManager# ip -6 route | grep default
default from 2601:646:4101:2de0::/60 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
default from 2601:646:4101:a740::/60 via fe80::32b5:c2ff:fe75:7faa dev eno1 proto babel metric 1024  pref medium
default via fe80::32b5:c2ff:fe75:7faa dev eno1 proto ra metric 1024  expires 65067sec hoplimit 64 pref high
default via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto static metric 2048  pref medium




* So I slammed stuff to printf around the error...

and haven't been able to duplicate it since. Well, it just took longer.

* More


It turns out debian distributes an old version - 1.5

fd44:0:0:95a::/64 via fe80::3aa2:8cff:fe5d:f9e5 dev wlan0  proto static  metric 1024


Another chip is showing this:

fd44:0:0:69::/64 via fe80::19e7:b4bd:1a5e:561a dev wlan0  proto static  metric 1024
*

fe80::3aa2:8cff:fe5d:effb is currently the source of the expired routes
that should have expired minutes ago.

but there are others

add route 12b860 prefix fd44:0:0:2524::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18008 refmetric 17666 via fe80::16cc:20ff:fee5:64c1 expires 0 if wlan0
add route d10b8 prefix fd44:0:0:2524::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18362 refmetric 17682 via fe80::7ec7:9ff:fede:2bb5 expires 0 if wlan0
add route 67098 prefix fd44:0:0:2525::/64 from ::/0 installed yes id 02:0d:b9:ff:fe:41:6c:2c metric 17690 refmetric 17410 via fe80::3aa2:8cff:fe5d:effb expires 0 if wlan0
add route 12b8b0 prefix fd44:0:0:2525::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18008 refmetric 17666 via fe80::16cc:20ff:fee5:64c1 expires 0 if wlan0
add route d11a8 prefix fd44:0:0:2525::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18362 refmetric 17682 via fe80::7ec7:9ff:fede:2bb5 expires 0 if wlan0
add route 75068 prefix fd44:0:0:2526::/64 from ::/0 installed yes id 02:0d:b9:ff:fe:41:6c:2c metric 17690 refmetric 17410 via fe80::3aa2:8cff:fe5d:effb expires 0 if wlan0
add route 12b900 prefix fd44:0:0:2526::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18008 refmetric 17666 via fe80::16cc:20ff:fee5:64c1 expires 0 if wlan0
add route d1298 prefix fd44:0:0:2526::/64 from ::/0 installed no id 02:0d:b9:ff:fe:41:6c:2c metric 18362 refmetric 17682 via fe80::7ec7:9ff:fede:2bb5 expires 0 if wlan0
add route 78a18 prefix fd44:0:0:2527::/64 from ::/0 installed yes id 02:0d:b9:ff:fe:41:6c:2c metric 17690 refmetric 17410 via fe80::3aa2:8cff:fe5d:effb expires 0 if wlan0




* Status -

So I reverted the core routine back to the original, hit it with 10,000
routes - and it got the kernel table into a bad state, but only had
8 failures doing so. And - waiting overnight as I gave up - at some point
after all these routes were removed - the kernel table became correct.

I did only listen on eno1 this time, where before wifi was in the loop.

I am beginning to smell 3 possibily interrelated bugs here:

A) Kernel refusing valid route updates - or babel getting confused on what it
injected -

B) the daemon itself getting into a state where it's announcing and responding
more to stuff than getting itself into a good state

C) the protocol wildcard stuff maybe?


root@dancer:~/git/rabeld# ./babeld eno1
Type: 0
failed kernel_route: add fd44:0:0:bf8::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
kernel_route(ADD): File exists
failed kernel_route: add fd44:0:0:c0c::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
kernel_route(ADD): File exists
failed kernel_route: add fd44:0:0:c4f::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
kernel_route(ADD): File exists
failed kernel_route: flush fd44:0:0:bf8::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
failed kernel_route: flush fd44:0:0:c0c::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
failed kernel_route: flush fd44:0:0:c4f::/64 from ::/0 table 254 metric 0 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d



* a more encouraging error

failed kernel_change: modify 172.26.200.0/22 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.1
kernel_route(MODIFY): Invalid argument
failed kernel_route: modify 172.26.200.0/22 from ::/0 table 254 metric 65535 dev 2 nexthop 172.26.16.5
failed kernel_change: modify 172.26.200.0/22 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.1
kernel_route(MODIFY): Invalid argument
failed kernel_route: modify 172.26.200.0/22 from ::/0 table 254 metric 65535 dev 2 nexthop 172.26.16.5
failed kernel_change: modify 172.26.200.0/22 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.1
kernel_route(MODIFY): Invalid argument
failed kernel_route: modify 172.26.200.0/22 from ::/0 table 254 metric 65535 dev 2 nexthop 172.26.16.5
failed kernel_change: modify 172.26.200.0/22 from ::/0 table 254 metric 0 dev 3 nexthop 172.26.201.1
kernel_route(MODIFY): Invalid argument


* yesterday
Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 39.53      3.72     3.72   152444     0.02     0.02  unsatisfied_request
 33.05      6.83     3.11   192175     0.02     0.02  satisfy_request
  9.56      7.73     0.90    51894     0.02     0.02  request_redundant
  8.82      8.56     0.83    21789     0.04     0.04  record_resend
  2.66      8.81     0.25  1469765     0.00     0.00  find_route_slot
  1.01      8.91     0.10 15118915     0.00     0.00  timeval_minus_msec
  0.74      8.98     0.07      585     0.12     3.28  update_neighbour_metric
  0.43      9.02     0.04  2165216     0.00     0.00  prefix_cmp
  0.32      9.05     0.03   228245     0.00     0.02  update_route
  0.32      9.08     0.03   185923     0.00     0.00  netlink_read.con

kernel_route(MODIFY metric): No such device
kernel_route(MODIFY metric): No such device
netlink_read: recvmsg(): No buffer space available
^Croot@dancer:~/git/rabeld#

kernel_route(MODIFY metric): No such device
kernel_route(MODIFY metric): No such device
kernel_route(MODIFY metric): Invalid argument

growing terror, that absolutely everything I depended on daily
didn't have robust error checking.

Odhcpd

Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink

Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink
Mon Feb 13 17:03:48 2017 daemon.debug odhcpd[13786]: Received 116 Bytes from kernel%netlink


d@dancer:~/git/rabeld$ cat babel2.log | sort | uniq -c
    365 kernel_route(ADD): File exists
   2121 kernel_route(FLUSH): No such process
 303320 kernel_route(MODIFY metric): Invalid argument
    329 kernel_route(MODIFY metric): No such device


v 3 nexthop 172.26.201.127
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::61/128 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::3aa2:8cff:fe5d:f9e5
kernel_route(FLUSH): No such process
send: Resource temporarily unavailable
send: Resource temporarily unavailable
send: Resource temporarily unavailable
send(unicast): Resource temporarily unavailable
failed kernel_route: add fd69:3860:b137::/48 from ::

failed kernel_route: flush fd44:0:0:d22::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d23::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d24::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d25::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d26::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d27::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d28::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d29::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2a::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2b::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2c::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2d::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2e::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d2f::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d30::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d31::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d32::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d33::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d34::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d35::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d36::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d37::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d38::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d39::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3a::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3b::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3c::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3d::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3e::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d3f::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d40::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d41::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d42::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d43::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d44::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d45::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d46::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d47::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d48::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d49::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4a::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4b::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4c::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4d::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4e::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d4f::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d50::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d51::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d52::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d53::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d54::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d55::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d56::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d57::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d58::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d59::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d5a::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d5b::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:d5c::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fde8:9cb6:b42e::/60 from ::/0 table 254 metric 65535 dev 2 nexthop fe80::20d:b9ff:fe41:6c2d
kernel_route(FLUSH): No such process
send: Resource temporarily unavailable
send: Resource temporarily unavailable
send(unicast): Resource temporarily unavailable
send(unicast): Resource temporarily unavailable
send(unicast): Resource temporarily unavailable
send(unicast): Resource temporarily unavailable
failed kernel_route: flush 172.26.96.65/32 from ::/0 table 254 metric 65535 dev 3 nexthop 172.26.201.113
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::65/128 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::3aa2:8cff:fe5d:effb
kernel_route(FLUSH): No such process
failed kernel_route: flush 172.26.96.64/32 from ::/0 table 254 metric 65535 dev 3 nexthop 172.26.201.114
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::64/128 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::7ec7:9ff:fede:2bb5
kernel_route(FLUSH): No such process
failed kernel_route: flush 172.26.96.61/32 from ::/0 table 254 metric 65535 dev 3 nexthop 172.26.201.127
kernel_route(FLUSH): No such process
failed kernel_route: flush 172.26.201.127/32 from ::/0 table 254 metric 65535 dev 3 nexthop 172.26.201.127
kernel_route(FLUSH): No such process
failed kernel_route: flush fd99::61/128 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::3aa2:8cff:fe5d:f9e5
kernel_route(FLUSH): No such process
send: Resource temporarily unavailable

d@dancer:~/git/rabeld$ cat *.log  | sort | uniq -c
   2127 kernel_route(ADD): File exists
   5447 kernel_route(FLUSH): No such process
 624589 kernel_route(MODIFY metric): Invalid argument
    570 kernel_route(MODIFY metric): No such device
    123 send: Resource temporarily unavailable
     16 send(unicast): Resource temporarily unavailable

NO SUCH PROCESS??? is ESRCH?
ENODEV no such device
ENOENT no such


https://github.com/openvswitch/ovs/blob/master/lib/netlink-socket.c

KErnel bu error code as bytes read???

        error = (retval < 0 ? errno
                 : retval == 0 ? ECONNRESET /* not possible? */
                 : nlmsghdr->nlmsg_len != UINT32_MAX ? 0
                 : retval);

ENOBUFS - we've lost state

v 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:f21::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:f22::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:f24::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:f27::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process

failed kernel_route: flush 2406:da00:ff00::/48 from 2600:3c01:e001:9300::/56 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(FLUSH): No such process
failed kernel_route: add 2406:da00:ff00::/48 from 2600:3c01:e001:9300::/56 table 254 metric 0 dev 3 nexthop fe80::16cc:20ff:fee5:64c1
kernel_route(ADD): File exists
send: Resource temporarily unavailable




So I got stuck in this state:

kernel_route(FLUSH): No such process
failed kernel_route: flush fd44:0:0:ac7::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::7ec7:9ff:fede:2bb5
kernel_route(FLUSH): No such process

d@dancer:~/git/babeld$ ip -6 route  | grep fd44:0:0:ac7::
fd44:0:0:ac7::/64 via fe80::7ec7:9ff:fede:2bb5 dev wlp2s0 proto babel metric 1024  pref medium
d@dancer:~/git/babeld$ sudo ip -6 route flush fd44:0:0:ac7::/64
[sudo] password for d:
d@dancer:~/git/babeld$ ip -6 route  | grep fd44:0:0:ac7::
gone

254 metric 65535 dev 3 nexthop fe80::7ec7:9ff:fede:2bb5
Error: inet prefix is expected rather than "metric".
d@dancer:~/git/babeld$ sudo ip -6 route flush fd44:0:0:ac6::/64 from ::/0 table 254 metric 65535 dev 3 nexthop fe80::7ec7:9ff:fede:2bb5

??? Is next hop the same as via?

If I flush something do I specify the metric??ip -

d@dancer:~/git/babeld$ sudo ip -6 route flush fd44:0:0:ac6::/64 from ::/0 table 254 dev wlp2s0 nexthop fe80::7ec7:9ff:fede:2bb5
Error: inet prefix is expected rather than "nexthop".
d@dancer:~/git/babeld$ sudo ip -6 route flush fd44:0:0:ac6::/64 from ::/0 table 254 dev wlp2s0 via  fe80::7ec7:9ff:fede:2bb5
d@dancer:~/git/babeld$ ip -6 route show | grep fd44:0:0:ac6
d@dancer:~/git/babeld$

A cool thing is I'm now in a state where all my known good routes are
toast

d@dancer:~/git/babeld$ ip -6 route | grep fd99::61
fd99::61 via fe80::3aa2:8cff:fe5d:f9e5 dev wlp2s0 proto babel metric 1024  pref medium
unreachable fd99::61 dev lo proto babel metric 4294967295  error -113 pref medium



unreachable 2406:da00:ff00::/48 from 2600:3c01:e001:9300::/56 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable 2601:646:4101:2de0::/60 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable 2601:646:4101:a740::/60 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd32:7d58:8d63::/48 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd55::/64 dev lo proto 44 metric 1024  error -101 pref medium
unreachable fd69:3860:b137::/48 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd99::13 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd99::61 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd99::64 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd99::65 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fd99::66 dev lo proto babel metric 4294967295  error -113 pref medium
unreachable fde8:9cb6:b42e::/60 dev lo proto babel metric 4294967295  error -113 pref medium




up vote
2
down vote
I wonder if you are running on a 64bits machine. If it is the case, I
suspect that the use of an int as the type of payload can be the root of
some issues as genlmsg_new() expects a size_t which is 64bits on x86_64.

FILE exists

EINVAL - invalid argument

(setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) , or
nl_socket_set_buffer_size() if y

https://github.com/golang/go/issues/5932

./babel -t 253

table 253 proto static???

                if (setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER,
                                &bpf_prog, sizeof(bpf_prog))) {
                        syslog(LOG_ERR, "Failed to set BPF: %s", strerror(errno));
                        ret = -1;
                        goto out;
                }

I am still missing one edge case from this and I'm not sure
what it is.

d@dancer:~/git/rabeld$ ip route
default via 172.26.16.5 dev eno1 proto babel online
default via 172.26.201.1 dev wlp2s0 proto static metric 600
172.26.16.0/24 dev eno1 proto kernel scope link src 172.26.16.3
172.26.20.0/22 via 172.26.16.1 dev eno1 proto babel onlink
172.26.64.0/24 via 172.26.16.5 dev eno1 proto babel onlink
172.26.96.61 via 172.26.201.127 dev wlp2s0 proto babel onlink
172.26.96.64 via 172.26.201.114 dev wlp2s0 proto babel onlink
172.26.96.65 via 172.26.201.113 dev wlp2s0 proto babel onlink
172.26.96.66 via 172.26.201.190 dev wlp2s0 proto babel onlink
172.26.96.100 via 172.26.16.1 dev eno1 proto babel onlink
172.26.130.0/23 via 172.26.16.5 dev eno1 proto babel onlink
172.26.200.0/22 via 172.26.16.5 dev eno1 proto babel onlink
172.26.201.0/24 dev wlp2s0 proto kernel scope link src 172.26.201.244 metric 600
172.26.201.127 via 172.26.201.127 dev wlp2s0 proto babel onlink
198.27.232.0/22 via 172.26.16.5 dev eno1 proto babel onlink

024  pref medium
fd44:0:0:a01::/64 via fe80::3aa2:8cff:fe5d:effb dev wlp2s0 proto static metric 1024  pref medium
fd44:0:0:a02::/64 via fe80::3aa2:8cff:fe5d:effb dev wlp2s0 proto static metric 1024  pref medium
fd44:0:0:a03::/64 via fe80::3aa2:8cff:fe5d:effb dev wlp2s0 proto static metric 1024  pref medium
unreachable fd55::/64

d@dancer:~/git/rabeld$ ip -6 route
default from 2600:3c01:e001:9300::/56 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
default from 2601:646:4101:2de0::/60 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
default from 2601:646:4101:a740::/60 via fe80::32b5:c2ff:fe75:7faa dev eno1 proto babel metric 1024  pref medium
2406:da00:ff00::/48 from 2600:3c01:e001:9300::/56 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2600:3c01:e001:9310::/64 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2600:3c01:e001:9300::/56 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2601:646:4101:2de0::/64 dev wlp2s0 proto ra metric 600  pref medium
2601:646:4101:2de0::/60 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2601:646:4101:a740::/64 dev eno1 proto kernel metric 256  expires 291141sec pref medium
2601:646:4101:a740::/60 via fe80::32b5:c2ff:fe75:7faa dev eno1 proto babel metric 1024  pref medium
2602:24c:61bf:9828::/64 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
2620:0:ef0::/48 from 2600:3c01:e001:9300::/56 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
fd32:7d58:8d63::199 dev wlp2s0 proto kernel metric 256  pref medium
fd32:7d58:8d63::/64 dev wlp2s0 proto ra metric 600  pref medium
fd32:7d58:8d63::/48 via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto babel metric 1024  pref medium
fd69:3860:b137::/48 via fe80::32b5:c2ff:fe75:7faa dev eno1 proto babel metric 1024  pref medium
fd99::4 via fe80::32b5:c2ff:fe75:7faa dev eno1 proto babel metric 1024  pref medium
fd99::10 via fe80::ba27:ebff:fec9:3c08 dev eno1 proto babel metric 1024  pref medium
fd99::13 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
fd99::61 via fe80::3aa2:8cff:fe5d:f9e5 dev wlp2s0 proto babel metric 1024  pref medium
fd99::64 via fe80::7ec7:9ff:fede:2bb5 dev wlp2s0 proto babel metric 1024  pref medium
fd99::65 via fe80::3aa2:8cff:fe5d:effb dev wlp2s0 proto babel metric 1024  pref medium
fd99::66 via fe80::3aa2:8cff:fe5d:d369 dev wlp2s0 proto babel metric 1024  pref medium
fdaf:dc63:6de9:8::/64 dev eno1 proto kernel metric 256  pref medium
fde8:9cb6:b42e::/60 via fe80::20d:b9ff:fe41:6c2d dev eno1 proto babel metric 1024  pref medium
fe80::/64 dev wlp2s0 proto kernel metric 256  pref medium
fe80::/64 dev eno1 proto kernel metric 256  pref medium
default via fe80::16cc:20ff:fee5:64c1 dev wlp2s0 proto static metric 600  pref medium
default via fe80::32b5:c2ff:fe75:7faa dev eno1 proto ra metric 1024  expires 65305sec hoplimit 64 pref high
